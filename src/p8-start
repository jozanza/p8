#!/usr/bin/env node

const program = require('commander')
  .command('p8')
  .usage('start [options] [name]')
  .description('starts cartridge')
  .option('-w, --watch', 'reload cartridge whenever entry point is updated')
  .parse(process.argv)

const { watch, args } = program
const { exec, execSync } = require('child_process')
const p8json = require(`${process.cwd()}/p8.json`)
const name = args[0] || p8json.name
const filename = `${name}.p8`

execSync(`${__dirname}/p8-build ${name}`)

if (watch) {
  const readline = require('readline')
  const rl = require('readline').createInterface({ input: process.stdin, output: process.stdout })
  const clearLine = () => rl.write(null, { ctrl: true, name: 'u' })
  const runApplescript = (...scripts) => execSync(`osascript ${scripts.map(x => `-e '${x}'`).join(' ')}`)
  const activate = 'tell application "PICO-8" to activate'
  const loadCart = 
`tell application "System Events"
key code 53
"load ${filename}"
key code 36
delay .1
key code 15 using control down
end tell`
  const idleMessage = 'waiting for changes...(Press ^C at any time to quit.)'
  let i = 0
  rl.setPrompt('âˆ´ ')
  rl.prompt()
  rl.write(idleMessage)
  require('fs').watch(p8json.main, (e, x) => {
    if (0 === i % 2 && e === 'change') {
      try {
        clearLine()
        rl.write(`${x} changed`)
        rl.write(`...building ${filename}`)
        execSync(`${__dirname}/p8-build ${name}`)
        rl.write('...reloading')
        runApplescript(activate, 'delay .3', loadCart)
        rl.write('...done!')
        setTimeout(() => {
          clearLine()
          rl.write(idleMessage)
        }, 500)
      } catch(err) {
        // clearLine()
        rl.write(err.message[0])
        // console.log(err.message)
      }
    }
    ++i
  })
}

exec(`/Applications/PICO-8.app/Contents/MacOS/pico8 -run ${filename}`)