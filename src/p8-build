#!/usr/bin/env node

const program = require('commander')
  .command('p8')
  .usage('build [options] [name]')
  .description('outputs .p8 file with specified name (defaults to name prop in p8.json)')
  .option('-p, --print', 'prints built code to stdout')
  .parse(process.argv)

const { print, args } = program
const p8json = require(`${process.cwd()}/p8.json`)
const {
  compilePicoRequire,
  compilePicoInit,
  writeSync,
  lowercase,
  toPairs
} = require('./utils')
const filename = `${args[0] || p8json.name}.p8`
let cart
try {
  cart = require('fs').readFileSync(filename, 'utf8')
} catch(err) {
  cart = require('./empty-cart')
}
const replaceLua = (a, b) => a.replace(/(__lua__)(.|[\r\n])+(?=__gfx__)/, `$1\n${b}\n`)
const replaceGfx = (a, b) => a.replace(/(__gfx__)(.|[\r\n])+(?=__gff__)/, `$1\n${b}\n`)
const compileAndReplaceLua = cart => {
  const data = [
    `-- ${lowercase(p8json.name)} ${lowercase(p8json.version)}`,
    `-- by ${lowercase(p8json.author)}`,
    (p8json.dependencies ? compilePicoRequire(p8json.dependencies) : null),
    compilePicoInit(p8json.main)
  ].filter(x => x).join('\n');
  return Promise.resolve(replaceLua(cart, data))
}
const compileAndReplaceGfx = cart => {
  const getPixels = require('get-pixels')
  const gfxs = toPairs(p8json.gfxDependencies||{}).map(([src, ext]) => {
    const { base } = require('path').parse(src)
    const img = require('fs').readFileSync(`pico_modules/${base}`)
    const palette = require('./palette')
    return new Promise(fulfill => getPixels(img, `image/${ext}`, (err, pixels) => {
      const [ h, w ] = pixels.shape
      let __gfx__ = ''
      for (let y = 0; y < 128; y++) {
        for (let x = 0; x < 128; x++) {
          if (x > w || y > h) return 0
          let px = [
            pixels.get(x, y, 0),
            pixels.get(x, y, 1),
            pixels.get(x, y, 2)
          ]
          __gfx__ += palette[px] || 0
        }
        __gfx__ += '\n'
      }
      fulfill(__gfx__)
    }))
  })
  return Promise.all(gfxs).then(gfxs => {
    const data = gfxs.reduce((next, gfx) => {
      let data = ''
      for (let i = 0; i < gfx.length; i++) {
        if (!next[i] || next[i] === '0') data += gfx[i]
        else data += next[i]
      }
      return data
    }, '')
    return Promise.resolve(replaceGfx(cart, data))
  })
}
const outputCart = cart => {
  if (print) return console.log(cart)
  writeSync(filename, cart)
}
Promise.resolve(cart)
  .then(compileAndReplaceLua)
  .then(compileAndReplaceGfx)
  .then(outputCart)
  .catch(console.error.bind(console))


